# -*- coding: utf-8 -*-
import re, unicodedata
from typing import List, Dict, Optional
from datetime import datetime
import pandas as pd
from pathlib import Path
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

# ==== import converter c·ªßa b·∫°n (TCVN3/VNI -> Unicode) ====
# ƒê·∫£m b·∫£o file converter.py (b·∫°n g·ª≠i) n·∫±m c√πng th∆∞ m·ª•c.
from converter import Converter
conv = Converter()

# ============ Regex & Chu·∫©n ho√° ============
RE_ID   = re.compile(r'\b(\d[\d\s\-.]{7,24}\d)\b')
RE_DATE = r'(\d{1,2}[\/\-.]\d{1,2}[\/\-.]\d{2,4})'

HONORIFIC = re.compile(
    r'^\s*(?:(?:v√†|va|&)\s*)?'
    r'(?:h·ªô\s*(?:√¥ng|b√†)|√¥ng|b√†|anh|ch·ªã|c√¥|ch√∫|b√°c|em|mr|mrs|ms|miss)'
    r'\s*[:\.-]?\s*',
    flags=re.IGNORECASE
)

def normalize_id(token: str) -> str:
    digits = re.sub(r'\D', '', token or '')
    return digits if 9 <= len(digits) <= 12 else ''

def strip_accents(s: str) -> str:
    if not isinstance(s, str): return ""
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s.replace("ƒê","D").replace("ƒë","d")

def normalize_text(s: str) -> str:
    if not isinstance(s, str): return ""
    s = s.replace('\u00A0', ' ')  # NBSP -> space
    s = re.sub(r'[_]+', ' ', s)
    s = re.sub(r'\s+', ' ', s).strip()
    return s

# --- chuy·ªÉn TCVN3/VNI/‚Ä¶ sang Unicode tr∆∞·ªõc khi parse ---
def legacy_to_unicode(s: str) -> str:
    if not isinstance(s, str): return ""
    return conv.convert(s, target_charset="UNICODE", source_charset="TCVN3")

# ch·ªØ c√°i (k·ªÉ c·∫£ c√≥ d·∫•u), s·ªë; d√πng ƒë·ªÉ t√°ch token vs. d·∫•u c√¢u/kho·∫£ng tr·∫Øng
_TOKEN_SPLIT = re.compile(r'(\W+)', flags=re.UNICODE)

def fix_mixed_tcvn3_to_unicode(s: str) -> str:
    """
    Chu·ªói c√≥ th·ªÉ pha Unicode + TCVN3.
    - T√°ch theo token, v·ªõi d·∫•u c√¢u/kho·∫£ng tr·∫Øng ƒë∆∞·ª£c gi·ªØ l·∫°i.
    - Token n√†o detect l√† TCVN3 th√¨ convert -> UNICODE.
    - Token ƒë√£ l√† Unicode th√¨ gi·ªØ nguy√™n.
    """
    if not isinstance(s, str):
        return ""
    parts = _TOKEN_SPLIT.split(s)   # gi·ªØ delimiter
    out = []
    for tok in parts:
        if not tok:
            continue
        # ch·ªâ th·ª≠ convert v·ªõi "t·ª´/c·ª•m" c√≥ ch·ªØ (tr√°nh convert d·∫•u c√¢u/space)
        if re.search(r'\w', tok, flags=re.UNICODE):
            cs = conv.detectCharset(tok)
            if cs and cs != "UNICODE" and cs == "TCVN3":
                try:
                    tok = conv.convert(tok, target_charset="UNICODE", source_charset="TCVN3")
                except Exception:
                    pass
        out.append(tok)
    return "".join(out)

def to_text(v) -> str:
    if v is None:
        return ""
    s = str(v)
    # üëá v√° pha tr·ªôn tr∆∞·ªõc
    s = fix_mixed_tcvn3_to_unicode(s)
    # r·ªìi chu·∫©n ho√° kho·∫£ng tr·∫Øng/nbps
    s = s.replace('\u00A0', ' ')
    s = re.sub(r'[_]+', ' ', s)
    s = re.sub(r'\s+', ' ', s).strip()
    return s

# ============ Nh·∫≠n di·ªán ti√™u ƒë·ªÅ I/II ============
def is_section_header_i(s: str) -> bool:
    ss = strip_accents(normalize_text(s)).upper()
    return bool(re.match(r'^I\s*[-‚Äì‚Äî]?\s*NGUOI\s*SU\s*DUNG\s*DAT\b', ss))

def is_section_header_ii(s: str) -> bool:
    ss = strip_accents(normalize_text(s)).upper()
    return bool(re.match(r'^II\s*[-‚Äì‚Äî]?\s*THUA\s*DAT\b', ss))

def row_has_section_I(df, r) -> bool:
    if r < 0 or r >= len(df): return False
    row = " ".join(to_text(v) for v in df.iloc[r, :].tolist())
    return is_section_header_i(row)

def row_has_section_II(df, r) -> bool:
    if r < 0 or r >= len(df): return False
    row = " ".join(to_text(v) for v in df.iloc[r, :].tolist())
    return is_section_header_ii(row)

# ============ ƒê·ªãa ch·ªâ ============
def is_address_line(s: str) -> bool:
    ss = strip_accents(normalize_text(s)).lower()
    return bool(re.match(r'^(?:dia\s*chi(?:\s*thuong\s*tru)?|d\s*\/\s*c|(?:noi\s*)?thuong\s*tru)\b', ss))

def extract_address(s: str) -> str:
    s_norm = normalize_text(s)
    m_vn = re.search(r'(?:ƒë·ªãa\s*ch[·ªâi](?:\s*th∆∞·ªùng\s*tr√∫)?|ƒë\s*\/\s*c|(?:n∆°i\s*)?th∆∞·ªùng\s*tr√∫)\s*[:\-]?\s*(.+)$',
                     s_norm, flags=re.IGNORECASE)
    if m_vn: return m_vn.group(1).strip(" .,_-")
    s_ascii = strip_accents(s_norm).lower()
    m = re.search(r'(?:dia\s*chi(?:\s*thuong\s*tru)?|d\s*\/\s*c|(?:noi\s*)?thuong\s*tru)\s*[:\-]?\s*(.+)$',
                  s_ascii, flags=re.IGNORECASE)
    return m.group(1).strip(" .,_-") if m else ""

def propagate_addresses(people: List[Dict]) -> None:
    addrs = [p.get('address','').strip() for p in people]
    uniq = {a for a in addrs if a}
    if len(uniq) == 1:
        addr = next(iter(uniq))
        for p in people:
            if not p.get('address'): p['address'] = addr

# ============ Ng∆∞·ªùi s·ª≠ d·ª•ng ============
def is_person_like(s: str) -> bool:
    return bool(
        re.search(r'(CMND|CCCD|CMT)\b', s, flags=re.IGNORECASE) or
        re.search(r'\bSinh\s+(?:nƒÉm|ng√†y)\b', s, flags=re.IGNORECASE)
    )

def parse_person(text: str) -> Optional[Dict]:
    s = normalize_text(text)
    if not s or is_address_line(s) or not is_person_like(s): return None

    # T√™n
    m_name = re.search(
        r'^(?:\s*(?:(?:v√†|va|&)\s*)?(?:h·ªô\s*(?:√¥ng|b√†)|√¥ng|b√†|anh|ch·ªã|c√¥|ch√∫|b√°c|em)\s*[:\.-]?\s*)?'
        r'([A-Z√Ä-·ª∏ƒê][^,\d]+?)\s*(?=,|\bSinh\b|\bCMND\b|\bCCCD\b|\bCMT\b|$)', s, flags=re.IGNORECASE)
    name = m_name.group(1).strip() if m_name else ''
    name = HONORIFIC.sub('', name).strip(' ,.-_')

    # NƒÉm/Ng√†y sinh
    birth_year, dob = '', ''
    m_year = re.search(r'Sinh\s*nƒÉm\s*:?[\s]*(\d{4})', s, flags=re.IGNORECASE)
    if m_year:
        birth_year = m_year.group(1)
    else:
        m_dob = re.search(r'Sinh\s*ng√†y\s*:?[\s]*' + RE_DATE, s, flags=re.IGNORECASE)
        if m_dob: dob = m_dob.group(1)

    # CMND/CCCD (c·∫£ "CCCD s·ªë" v√† "s·ªë CCCD")
    id_number = ''
    m_id_labeled = re.search(
        r'(?:(?:CMND|CCCD|CMT)\s*(?:s[·ªëo]|so)?|(?:s[·ªëo]|so)\s*(?:CMND|CCCD|CMT))'
        r'\s*[:\-\.,;]*\s*'
        r'([0-9][0-9\-\s\.]{7,24}\d)',
        s, flags=re.IGNORECASE
    )
    if m_id_labeled:
        id_number = normalize_id(m_id_labeled.group(1))
    if not id_number:
        for tok in RE_ID.findall(s):
            n = normalize_id(tok)
            if n: id_number = n; break

    # Ng√†y c·∫•p: c·∫£ "c·∫•p ng√†y" & "ng√†y c·∫•p"
    issue_date = ''
    m_issue = re.search(
        r'(?:(?:c·∫•p|cap)\s*[:,\-]?\s*ng√†y|ng√†y\s*[:,\-]?\s*(?:c·∫•p|cap))\s*[:,\-]?\s*' + RE_DATE,
        s, flags=re.IGNORECASE
    )
    if m_issue: issue_date = m_issue.group(1)

    if not name or (not id_number and not birth_year and not dob): return None
    return {
        'full_name': name,
        'birth_year': birth_year or dob,
        'id_number': id_number,
        'issue_date': issue_date,
        'address': ''
    }

# ============ Th·ª≠a ƒë·∫•t (ƒë·ªçc b·∫£ng nhi·ªÅu c·ªôt) ============
def is_date_like(s: str) -> bool:
    s = s.strip()
    if not s: return False
    if re.match(r'^\d{1,2}[\/\-.]\d{1,2}[\/\-.]\d{2,4}$', s): return True
    if re.match(r'^\d{4}[\/\-.]\d{1,2}[\/\-.]\d{1,2}$', s): return True
    if s.isdigit() and 20000 <= int(s) <= 60000: return True  # serial excel
    return False

def normalize_date(s: str) -> str:
    s = s.strip()
    if not s: return ""
    if s.isdigit() and 20000 <= int(s) <= 60000:
        base = datetime(1899, 12, 30)
        dt = base + pd.to_timedelta(int(s), unit="D")
        return dt.strftime("%d/%m/%Y")
    for fmt in ("%d/%m/%Y", "%d-%m-%Y", "%Y-%m-%d", "%d.%m.%Y"):
        try:
            return datetime.strptime(s, fmt).strftime("%d/%m/%Y")
        except Exception:
            pass
    return s

# ============ Gom b√¨a t·ª´ DataFrame ============
def group_records_from_df(df: pd.DataFrame) -> List[Dict]:
    n_rows, n_cols = df.shape
    r = 0
    rows: List[Dict] = []
    in_bia = False
    section = None
    current_people: List[Dict] = []
    current_parcels: List[Dict] = []

    def cell(rr, cc):
        if rr < 0 or rr >= n_rows or cc < 0 or cc >= n_cols: return ""
        return to_text(df.iat[rr, cc])

    def flush_bia():
        nonlocal rows, current_people, current_parcels, in_bia
        if not in_bia: return
        if not current_people and not current_parcels: 
            in_bia = False
            return
        propagate_addresses(current_people)
        p1 = current_people[0] if len(current_people) >= 1 else {}
        p2 = current_people[1] if len(current_people) >= 2 else {}
        for thua in (current_parcels or [dict()]):
            rows.append({
                'Ng√†y th√°ng v√†o s·ªï': thua.get('ngay',''),
                'S·ªë th·ª© t·ª± th·ª≠a ƒë·∫•t': thua.get('thua',''),
                'S·ªë th·ª© t·ª± t·ªù b·∫£n ƒë·ªì': thua.get('to',''),
                'Di·ªán t√≠ch s·ª≠ d·ª•ng ri√™ng (m¬≤)': thua.get('rieng',''),
                'Di·ªán t√≠ch s·ª≠ d·ª•ng chung (m¬≤)': thua.get('chung',''),
                'M·ª•c ƒë√≠ch s·ª≠ d·ª•ng': thua.get('mucdich',''),
                'Th·ªùi h·∫°n s·ª≠ d·ª•ng': thua.get('thoihan',''),
                'Ngu·ªìn g·ªëc s·ª≠ d·ª•ng': thua.get('nguongoc',''),
                'S·ªë ph√°t h√†nh GCN': thua.get('soph',''),
                'S·ªë v√†o s·ªï': thua.get('sovs',''),
                'T√™n ch·ªß 1': p1.get('full_name',''),
                'NƒÉm sinh 1': p1.get('birth_year',''),
                'S·ªë gi·∫•y t·ªù 1': p1.get('id_number',''),
                'Ng√†y c·∫•p 1': p1.get('issue_date',''),
                'ƒê·ªãa ch·ªâ 1': p1.get('address',''),
                'T√™n ch·ªß 2': p2.get('full_name',''),
                'NƒÉm sinh 2': p2.get('birth_year',''),
                'S·ªë gi·∫•y t·ªù 2': p2.get('id_number',''),
                'Ng√†y c·∫•p 2': p2.get('issue_date',''),
                'ƒê·ªãa ch·ªâ 2': p2.get('address',''),
            })
        current_people.clear()
        current_parcels.clear()
        in_bia = False

    while r < n_rows:
        # B·∫Øt ƒë·∫ßu b√¨a t·∫°i d√≤ng c√≥ "I - NG∆Ø·ªúI S·ª¨ D·ª§NG ƒê·∫§T" (·ªü b·∫•t k·ª≥ √¥ n√†o c·ªßa h√†ng)
        if row_has_section_I(df, r):
            flush_bia()
            in_bia = True
            section = 'I'
            r += 1
            continue

        if not in_bia:
            r += 1
            continue

        # ƒê·∫øn m·ª•c II -> ƒë·ªçc b·∫£ng nhi·ªÅu c·ªôt
        if row_has_section_II(df, r):
            section = 'II'
            # t√¨m header trong 1-4 d√≤ng ti·∫øp theo
            header_r = None
            for k in range(1, 5):
                if r + k >= n_rows: break
                line = " | ".join(strip_accents(cell(r + k, c)).lower() for c in range(n_cols))
                if ("ngay" in line and "vao so" in line) and ("so thu tu" in line):
                    header_r = r + k
                    break
            if header_r is None:
                r += 1
                continue

            # map t√™n c·ªôt -> index
            col_map = {}
            for c in range(n_cols):
                h = strip_accents(cell(header_r, c)).lower()
                if 'ngay' in h and 'vao so' in h: col_map['ngay'] = c
                if 'so thu tu' in h and 'thua dat' in h: col_map['thua'] = c
                if 'so thu tu' in h and 'to ban do' in h: col_map['to'] = c
                if 'rieng' in h: col_map['rieng'] = c
                if 'chung' in h: col_map['chung'] = c
                if 'muc dich' in h: col_map['mucdich'] = c
                if 'thoi han' in h: col_map['thoihan'] = c
                if 'nguon goc' in h: col_map['nguongoc'] = c
                if 'so phat hanh' in h or 'gcn qsdd' in h: col_map['soph'] = c
                if 'so vao so' in h: col_map['sovs'] = c

            # ƒë·ªçc c√°c h√†ng d·ªØ li·ªáu cho ƒë·∫øn khi c·ªôt ng√†y kh√¥ng c√≤n h·ª£p l·ªá
            rr = header_r + 1
            while rr < n_rows:
                v_ngay_raw = cell(rr, col_map.get('ngay', 0))
                if not is_date_like(v_ngay_raw):
                    break
                ngay = normalize_date(v_ngay_raw)
                def g(key):
                    if key not in col_map: return ''
                    return cell(rr, col_map[key])

                thua = {
                    'ngay'   : ngay,
                    'thua'   : g('thua'),
                    'to'     : g('to'),
                    'rieng'  : g('rieng').replace(',', '.').replace('Kh√¥ng','').replace('kh√¥ng',''),
                    'chung'  : g('chung').replace(',', '.').replace('Kh√¥ng','').replace('kh√¥ng',''),
                    'mucdich': g('mucdich'),
                    'thoihan': g('thoihan'),
                    'nguongoc': g('nguongoc'),
                    'soph'   : g('soph').replace(' ', ''),
                    'sovs'   : g('sovs'),
                }
                current_parcels.append(thua)
                rr += 1

            r = rr
            continue

        # ƒêang trong m·ª•c I: ƒë·ªçc ng∆∞·ªùi & ƒë·ªãa ch·ªâ (g·ªôp c·∫£ h√†ng cho ch·∫Øc)
        if section == 'I':
            row_text = " ".join(cell(r, c) for c in range(n_cols))
            if is_address_line(row_text):
                if current_people:
                    addr = extract_address(row_text)
                    if addr and not current_people[-1].get('address'):
                        current_people[-1]['address'] = addr
                        propagate_addresses(current_people)
            else:
                p = parse_person(row_text)
                if p: current_people.append(p)
            r += 1
            continue

        r += 1

    # flush b√¨a cu·ªëi
    flush_bia()
    return rows

# ============ Run + GUI ============
def run_extraction(input_path: Path, output_path: Path, sheet, _col_index_unused: int):
    # √©p openpyxl ƒë·ªÉ ƒë·∫£m b·∫£o Unicode
    df = pd.read_excel(input_path, sheet_name=sheet, dtype=object, engine="openpyxl")
    records = group_records_from_df(df)
    out_df = pd.DataFrame(records)

    ordered_cols = [
        'Ng√†y th√°ng v√†o s·ªï','S·ªë th·ª© t·ª± th·ª≠a ƒë·∫•t','S·ªë th·ª© t·ª± t·ªù b·∫£n ƒë·ªì',
        'Di·ªán t√≠ch s·ª≠ d·ª•ng ri√™ng (m¬≤)','Di·ªán t√≠ch s·ª≠ d·ª•ng chung (m¬≤)',
        'M·ª•c ƒë√≠ch s·ª≠ d·ª•ng','Th·ªùi h·∫°n s·ª≠ d·ª•ng','Ngu·ªìn g·ªëc s·ª≠ d·ª•ng',
        'S·ªë ph√°t h√†nh GCN','S·ªë v√†o s·ªï',
        'T√™n ch·ªß 1','NƒÉm sinh 1','S·ªë gi·∫•y t·ªù 1','Ng√†y c·∫•p 1','ƒê·ªãa ch·ªâ 1',
        'T√™n ch·ªß 2','NƒÉm sinh 2','S·ªë gi·∫•y t·ªù 2','Ng√†y c·∫•p 2','ƒê·ªãa ch·ªâ 2'
    ]
    for c in ordered_cols:
        if c not in out_df.columns: out_df[c] = ''
    out_df = out_df[ordered_cols]
    out_df.to_excel(output_path, index=False, engine="openpyxl")

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Xu·∫•t TH·ª¨A ƒê·∫§T + Ch·ªß (I -> II) | T·ª± convert TCVN3/VNI -> Unicode")
        self.geometry("760x380"); self.resizable(False, False)
        self.in_path_var = tk.StringVar(); self.out_path_var = tk.StringVar()
        self.col_var = tk.StringVar(value="0")  # gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch, kh√¥ng d√πng ·ªü II
        self.sheet_var = tk.StringVar(value="0")
        self._build_ui()

    def _build_ui(self):
        pad = {'padx':10,'pady':6}
        f1=ttk.Frame(self); f1.pack(fill='x', **pad)
        ttk.Label(f1,text="File Excel ƒë·∫ßu v√†o (.xlsx):").pack(side='left')
        ttk.Entry(f1,textvariable=self.in_path_var,width=60).pack(side='left',padx=8)
        ttk.Button(f1,text="Ch·ªçn...",command=self.choose_input).pack(side='left')

        f2=ttk.Frame(self); f2.pack(fill='x', **pad)
        ttk.Label(f2,text="File Excel ƒë·∫ßu ra:").pack(side='left')
        ttk.Entry(f2,textvariable=self.out_path_var,width=60).pack(side='left',padx=8)
        ttk.Button(f2,text="L∆∞u th√†nh...",command=self.choose_output).pack(side='left')

        f3=ttk.Frame(self); f3.pack(fill='x', **pad)
        ttk.Label(f3,text="Sheet:").pack(side='left')
        self.sheet_cb=ttk.Combobox(f3,textvariable=self.sheet_var,width=28,state="readonly",values=["0"])
        self.sheet_cb.pack(side='left',padx=8)

        ttk.Label(f3,text="(Tu·ª≥ ch·ªçn) C·ªôt ngu·ªìn cho m·ª•c I (0=A):").pack(side='left',padx=(20,0))
        ttk.Entry(f3,textvariable=self.col_var,width=6).pack(side='left',padx=8)

        f4=ttk.Frame(self); f4.pack(fill='x', **pad)
        self.run_btn=ttk.Button(f4,text="Ch·∫°y",command=self.on_run); self.run_btn.pack(side='left')
        ttk.Button(f4,text="Tho√°t",command=self.destroy).pack(side='right')

        f5=ttk.Frame(self); f5.pack(fill='both',expand=True, **pad)
        ttk.Label(f5,text="Nh·∫≠t k√Ω:").pack(anchor='w')
        self.log=tk.Text(f5,height=9); self.log.pack(fill='both',expand=True)

    def log_print(self,s:str):
        self.log.insert('end',s+"\n"); self.log.see('end'); self.update_idletasks()

    def choose_input(self):
        p=filedialog.askopenfilename(title="Ch·ªçn file Excel ƒë·∫ßu v√†o",
            filetypes=[("Excel files","*.xlsx"),("All files","*.*")])
        if not p: return
        self.in_path_var.set(p)
        try:
            xls=pd.ExcelFile(p, engine="openpyxl")
            sheets=xls.sheet_names
            self.sheet_cb['values']=sheets
            self.sheet_var.set(sheets[0] if sheets else "0")
            out_guess=str(Path(p).with_name(f"{Path(p).stem}_thuadat_owners.xlsx"))
            if not self.out_path_var.get(): self.out_path_var.set(out_guess)
        except Exception as e:
            messagebox.showerror("L·ªói ƒë·ªçc file", f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c danh s√°ch sheet:\n{e}")

    def choose_output(self):
        p=filedialog.asksaveasfilename(title="Ch·ªçn n∆°i l∆∞u file k·∫øt qu·∫£",
            defaultextension=".xlsx", filetypes=[("Excel files","*.xlsx")])
        if p: self.out_path_var.set(p)

    def on_run(self):
        in_path=self.in_path_var.get().strip()
        out_path=self.out_path_var.get().strip()
        sheet=self.sheet_var.get().strip()
        col_text=self.col_var.get().strip()  # gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch
        if not in_path: messagebox.showwarning("Thi·∫øu file ƒë·∫ßu v√†o","Ch·ªçn file Excel ƒë·∫ßu v√†o."); return
        if not out_path: messagebox.showwarning("Thi·∫øu file ƒë·∫ßu ra","Ch·ªçn n∆°i l∆∞u file k·∫øt qu·∫£."); return
        try:
            sheet_arg=int(sheet)
        except:
            sheet_arg=sheet
        try:
            _col_index=int(col_text) if col_text else 0
        except:
            messagebox.showwarning("C·ªôt ngu·ªìn kh√¥ng h·ª£p l·ªá","Nh·∫≠p s·ªë index: 0 cho A, 1 cho B, ..."); return

        try:
            self.run_btn.config(state='disabled')
            self.log_print("ƒêang ch·∫°y tr√≠ch xu·∫•t (t·ª± chuy·ªÉn TCVN3/VNI -> Unicode)...")
            run_extraction(Path(in_path), Path(out_path), sheet_arg, _col_index)
            self.log_print(f"ƒê√£ xu·∫•t: {out_path}")
            messagebox.showinfo("Ho√†n t·∫•t", f"ƒê√£ xu·∫•t:\n{out_path}")
        except Exception as e:
            messagebox.showerror("L·ªói x·ª≠ l√Ω", str(e))
        finally:
            self.run_btn.config(state='normal')

if __name__ == "__main__":
    App().mainloop()
